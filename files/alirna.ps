%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Wed Mar  6 22:09:33 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGCCCGUAGCACAGUGGA__AGAGCACAUGCCUUCCAACCA_GAUGUCCCGGGUUCGAAUCCAGCCGAGCCCA\
) def
/coor [
[110.62167358 226.01321411]
[109.99353790 211.02636719]
[109.36540222 196.03953552]
[108.73726654 181.05268860]
[108.10913849 166.06584167]
[107.48100281 151.07901001]
[106.85286713 136.09216309]
[89.76250458 133.42785645]
[76.61513519 123.54380798]
[70.03258514 109.40021515]
[55.06218338 110.34207916]
[40.09178162 111.28393555]
[25.12138176 112.22579193]
[17.70208549 125.75197601]
[4.13687181 133.09965515]
[-11.24564838 131.92424011]
[-23.53696823 122.60076904]
[-28.81497383 108.10435486]
[-25.39546967 93.06072998]
[-14.36961079 82.27027130]
[0.74429351 79.17617798]
[15.12345123 84.76575470]
[24.17952538 97.25539398]
[39.14992523 96.31352997]
[54.12032700 95.37167358]
[69.09072876 94.42981720]
[75.80036163 79.98031616]
[88.73666382 70.68196106]
[86.85665894 55.80024338]
[84.97666168 40.91852188]
[83.09666443 26.03680229]
[81.21666718 11.15508175]
[67.97510529 2.83672595]
[63.22764587 -12.06279182]
[69.21589661 -26.50837517]
[83.11238098 -33.67926407]
[98.35561371 -30.18957901]
[107.74819946 -17.68704605]
[106.85524750 -2.07497859]
[96.09838867 9.27508259]
[97.97838593 24.15680313]
[99.85838318 39.03852463]
[101.73838043 53.92024612]
[103.61837769 68.80196381]
[112.77684784 70.33943176]
[121.32748413 74.57754517]
[128.47222900 81.28533173]
[133.49851990 89.99612427]
[135.84866333 100.03857422]
[135.17813110 110.58798218]
[150.01721191 112.77922821]
[164.85629272 114.97047424]
[179.69537354 117.16172028]
[194.53446960 119.35296631]
[206.10731506 108.83615875]
[221.73466492 108.27035522]
[234.03775024 117.92272186]
[237.20742798 133.23568726]
[229.74708557 146.97895813]
[215.17927551 152.66336060]
[200.38244629 147.60491943]
[192.34321594 134.19204712]
[177.50413513 132.00080872]
[162.66505432 129.80955505]
[147.82595825 127.61831665]
[132.98687744 125.42707062]
[121.83970642 135.46403503]
[122.46784210 150.45086670]
[123.09597778 165.43771362]
[123.72411346 180.42456055]
[124.35224915 195.41139221]
[124.98038483 210.39823914]
[125.60852051 225.38508606]
[128.60386658 244.53392029]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[10 26]
[11 25]
[12 24]
[13 23]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 cmark
73 cmark
2 cmark
72 cmark
3 cmark
71 cmark
4 cmark
70 cmark
5 69 2 gmark
5 cmark
69 cmark
6 68 1 gmark
6 cmark
68 cmark
7 cmark
67 cmark
26 cmark
11 cmark
25 cmark
12 24 1 gmark
12 cmark
24 cmark
13 cmark
23 cmark
28 44 2 gmark
29 43 2 gmark
29 cmark
43 cmark
30 cmark
42 cmark
31 cmark
41 cmark
32 cmark
40 cmark
50 cmark
66 cmark
51 cmark
65 cmark
52 cmark
64 cmark
54 62 1 gmark
54 cmark
62 cmark

% End Annotations
% show it
showpage
end
%%EOF
